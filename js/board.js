// Generated by CoffeeScript 2.5.1
var SIZE,
  indexOf = [].indexOf;

import _ from 'https://cdn.skypack.dev/lodash';

import {
  ass,
  lerp,
  param,
  range,
  hexToBase64
} from '../js/utils.js';

import cryptoJs from 'https://cdn.skypack.dev/crypto-js';

import {
  Square
} from '../js/square.js';

import {
  Button
} from '../js/button.js';

import {
  coords,
  clickString,
  getMove,
  global,
  loadTree,
  toObjectNotation,
  toUCI
} from '../js/globals.js';

import {
  dumpState
} from '../js/globals.js';

SIZE = global.SIZE;

export var Board = (function() {
  var calcBar;

  class Board {
    constructor() {
      var i, k, len, ref, x0, x1, x2, x3;
      // start : =>
      // 	@pieces = "RNBQKBNRPPPPPPPP33333333444444445555555566666666pppppppprnbqkbnr"
      this.click = this.click.bind(this);
      // move : (i) =>
      // 	param.Integer i
      // 	console.log 'move',i
      // 	m = global.moves[global.index-1]
      // 	if i==0 then key = m.uci else key = m.superiors[i-1]
      // 	@pieces = makeMove key, global.piecess[global.index-1]
      // 	global.superIndex = i+1
      // 	fixSuper 0

      // g책 igenom nodens barn och visa dem i en sorterad lista
      this.showChildren = this.showChildren.bind(this);
      this.draw = this.draw.bind(this);
      this.littera = this.littera.bind(this);
      this.flip = this.flip.bind(this);
      this.squares = [];
      this.clickedSquares = [];
      this.pieces = "";
      this.flipped = false;
      ref = range(64);
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        ((i) => {
          return this.squares.push(new Square(i, () => {
            return this.click(i);
          }));
        })(i);
      }
      // @start()
      this.buttons = [];
      x0 = 1.5;
      x1 = 3.5;
      x2 = 5.5;
      x3 = 7.5;
      this.buttons.push(new Button(x0 * SIZE, 9.5 * SIZE, 'undo', () => {
        return clickString('undo');
      }));
      //@buttons.push new Button x0*SIZE, 9.5*SIZE, 'first',    => clickString 'first'
      //@buttons.push new Button x1*SIZE, 9.5*SIZE, 'move -1',  => clickString 'prev'
      //@buttons.push new Button x2*SIZE, 9.5*SIZE, 'move +1',  => clickString 'next'
      //@buttons.push new Button x3*SIZE, 9.5*SIZE, 'last',     => clickString 'last'
      this.buttons.push(new Button(x0 * SIZE, 10.5 * SIZE, 'flip', () => {
        return clickString('flip');
      }));
      //@buttons.push new Button x1*SIZE, 10.5*SIZE, 'game -1', => clickString 'pgup'
      //@buttons.push new Button x2*SIZE, 10.5*SIZE, 'game +1', => clickString 'pgdn'
      this.buttons.push(new Button(x3 * SIZE, 10.5 * SIZE, 'link', () => {
        return clickString('link');
      }));
    }

    click(i) {
      var move, uci;
      if (this.clickedSquares.length === 0) {
        if (true) { // pj채s av r채tt f채rg
          this.clickedSquares.push(i);
        }
      } else if (this.clickedSquares.length === 1) {
        if (i === this.clickedSquares[0]) {
          this.clickedSquares = [];
        } else {
          this.clickedSquares.push(i);
          move = toObjectNotation(this.clickedSquares); //[0],@clickedSquares[1]]
          uci = toUCI(this.clickedSquares); //[0],@clickedSquares[1]
          this.clickedSquares = [];
          console.log(move);
          global.chess.move(move);
          console.log('click', global.currNode, uci);
          global.stack.push(global.currNode);
          global.currNode = global.currNode[uci];
          dumpState();
        }
      } else {
        // showChildren()

        // coffee  lSpemS5l rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1
        // python: lSpemS5l rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1

        //console.log 'history',global.chess.history()
        this.clickedSquares = [i];
      }
      return console.log('sqclick', this.clickedSquares);
    }

    showChildren() {
      var base64, fen, i, k, key, keys, len, pair, ref, value;
      keys = _.keys(global.currNode);
      push();
      noStroke();
      textAlign(LEFT, CENTER);
      fill('white');
      ref = range(keys.length);
      //key in _.keys global.currNode
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        key = keys[i];
        pair = coords(key);
        global.chess.move(toObjectNotation(pair));
        fen = global.chess.fen();
        base64 = hexToBase64(cryptoJs.SHA256(fen).toString()).slice(0, 8);
        value = global.database[base64];
        if (value === void 0) {
          value = "?";
        }
        console.log(key, base64, value, fen);
        text(key + ": " + value, 8.7 * SIZE, 1 * SIZE + i * 0.5 * SIZE);
        global.chess.undo();
      }
      return pop();
    }

    draw() {
      var button, i, j, k, l, len, len1, len2, m, piece, ref, ref1, ref2, score;
      ref = this.buttons;
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        button.draw();
      }
      if (!global.tree) {
        return;
      }
      fill('white');
      textSize(SIZE * 0.3);
      push();
      textAlign(LEFT, CENTER);
      text(global.trees[0].name, 0.05 * SIZE, 0.3 * SIZE);
      pop();
      ref1 = range(8);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        i = ref1[l];
        ref2 = range(8);
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          j = ref2[m];
          piece = global.chess.board()[7 - i][j];
          this.squares[i * 8 + j].draw(piece, this.flipped, i * 8 + j === this.clickedSquares[0]);
        }
      }
      stroke('black');
      noFill();
      rect(SIZE * 4.5, SIZE * 4.5, SIZE * 8, SIZE * 8);
      this.littera();
      push();
      textAlign(CENTER, CENTER);
      if (global.index > 0) {
        text('move: ' + (1 + Math.floor(global.index / 2)) + "BW"[global.index % 2] + " of " + (1 + Math.floor(global.moves.length / 2)), 4.5 * SIZE, 10 * SIZE);
      }
      if (global.index === 0) {
        score = '0';
      }
      // else 
      // 	if global.superIndex == 0
      // 		score = global.moves[global.index-1].score
      // 	else 
      // 		score = global.moves[global.index-1].scores[global.superIndex-1]

      // text 'depth: '+global.tree.depth, 1.5*SIZE, 10*SIZE
      text(global.version, 7.5 * SIZE, 10 * SIZE);
      textAlign(RIGHT, CENTER);
      fill('white');
      text(score, 10.1 * SIZE, 0.3 * SIZE);
      pop();
      this.drawBars(score);
      return this.showChildren();
    }

    littera() {
      var digits, i, k, len, letters, ref, results;
      noStroke();
      fill('black');
      textSize(SIZE * 0.3);
      letters = this.flipped ? "hgfedcba" : "abcdefgh";
      digits = this.flipped ? "12345678" : "87654321";
      ref = range(8);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        text(letters[i], SIZE * (i + 1), SIZE * 8.8);
        results.push(text(digits[i], SIZE * 0.15, SIZE * (i + 1)));
      }
      return results;
    }

    flip() {
      return this.flipped = !this.flipped;
    }

    drawBars(score) {
      var h, w, x;
      param.String(score);
      stroke('black');
      h = calcBar(score);
      push();
      if (this.flipped) {
        translate(0, SIZE * 9);
        scale(1, -1);
      }
      rectMode(CORNER);
      noStroke();
      x = 0.35 * SIZE;
      w = 0.10 * SIZE;
      fill('black');
      rect(x, 0.5 * SIZE, w, SIZE * 4);
      fill('white');
      rect(x, 4.5 * SIZE, w, SIZE * 4);
      if (h > 0) {
        fill('white');
        rect(x, 4.5 * SIZE - h, w, h);
      } else {
        fill('black');
        rect(x, 4.5 * SIZE, w, -h);
      }
      return pop();
    }

  };

  calcBar = (score) => {
    var LIMIT, d, res;
    param.String(score);
    LIMIT = 2000;
    if (score[0] === '#') {
      d = LIMIT;
    } else {
      d = Math.abs(score);
    }
    if (d > LIMIT) {
      d = LIMIT;
    }
    res = lerp(0, 4 * SIZE, d / LIMIT);
    if (indexOf.call(score, "-") >= 0) {
      res = -res;
    }
    return param.Integer(Math.round(res));
  };

  ass(4 * SIZE, calcBar("2100"));

  ass(4 * SIZE, calcBar("2000"));

  ass(2 * SIZE, calcBar("1000"));

  ass(SIZE, calcBar("500"));

  ass(0, calcBar("1"));

  ass(-SIZE, calcBar("-500"));

  ass(-4 * SIZE, calcBar("#-1"));

  return Board;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-019-ChessTree\coffee\board.coffee