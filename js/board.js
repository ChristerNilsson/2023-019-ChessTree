// Generated by CoffeeScript 2.5.1
var SIZE,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

import _ from 'https://cdn.skypack.dev/lodash';

import {
  ass,
  lerp,
  param,
  range,
  hexToBase64
} from '../js/utils.js';

import cryptoJs from 'https://cdn.skypack.dev/crypto-js';

import {
  Square
} from '../js/square.js';

import {
  Button
} from '../js/button.js';

import {
  coords,
  clickString,
  getMove,
  global,
  loadTree,
  toObjectNotation,
  toUCI
} from '../js/globals.js';

import {
  dumpState
} from '../js/globals.js';

SIZE = global.SIZE;

export var Board = (function() {
  var calcBar;

  class Board {
    constructor() {
      var i, k, len, ref, x0, x1, x2, x3;
      this.click = this.click.bind(this);
      // g√• igenom nodens barn och visa dem i en sorterad lista
      this.showChildren = this.showChildren.bind(this);
      this.draw = this.draw.bind(this);
      this.littera = this.littera.bind(this);
      this.flip = this.flip.bind(this);
      this.squares = [];
      this.clickedSquares = [];
      this.pieces = "";
      this.flipped = false;
      ref = range(64);
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        ((i) => {
          return this.squares.push(new Square(i, () => {
            return this.click(i);
          }));
        })(i);
      }
      this.buttons = [];
      x0 = 1.5;
      x1 = 3.5;
      x2 = 5.5;
      x3 = 7.5;
      this.buttons.push(new Button(x0 * SIZE, 9.5 * SIZE, 'undo', () => {
        return clickString('undo');
      }));
      this.buttons.push(new Button(x0 * SIZE, 10.5 * SIZE, 'flip', () => {
        return clickString('flip');
      }));
      this.buttons.push(new Button(x3 * SIZE, 10.5 * SIZE, 'link', () => {
        return clickString('link');
      }));
    }

    click(i) {
      var col, color, move, row, sq, uci;
      col = modulo(i, 8);
      row = 7 - Math.floor(i / 8);
      sq = global.chess.board()[row][col];
      color = "wb"[modulo(global.chess.history().length, 2)];
      if (this.clickedSquares.length === 0) {
        if (sq === null) {
          return;
        }
        if (sq.color === color) {
          return this.clickedSquares.push(i);
        }
      } else {
        if (i === this.clickedSquares[0]) {
          this.clickedSquares = [];
          return;
        }
        this.clickedSquares.push(i);
        move = toObjectNotation(this.clickedSquares);
        uci = toUCI(this.clickedSquares);
        if (global.chess.move(move)) { // accepera draget
          global.stack.push(global.currNode);
          if (indexOf.call(global.currNode, uci) < 0) {
            global.currNode[uci] = {};
          }
          global.currNode = global.currNode[uci];
        }
        return this.clickedSquares = [];
      }
    }

    showChildren() {
      var base64, fen, i, k, key, keys, len, pair, ref, san, value;
      keys = _.keys(global.currNode);
      push();
      noStroke();
      textAlign(LEFT, CENTER);
      fill('white');
      ref = range(keys.length);
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        key = keys[i];
        pair = coords(key);
        global.chess.move(toObjectNotation(pair));
        fen = global.chess.fen();
        // console.log key,pair,toObjectNotation pair
        //san = global.chess.san toObjectNotation pair
        san = _.last(global.chess.history());
        base64 = hexToBase64(cryptoJs.SHA256(fen).toString()).slice(0, 8);
        value = global.database[base64] || "?";
        // console.log key, san, base64, value, fen
        text(san + ": " + value, 8.7 * SIZE, 1 * SIZE + i * 0.5 * SIZE);
        global.chess.undo();
      }
      return pop();
    }

    draw() {
      var button, i, j, k, l, len, len1, len2, m, piece, ref, ref1, ref2, score;
      ref = this.buttons;
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        button.draw();
      }
      if (!global.tree) {
        return;
      }
      fill('white');
      textSize(SIZE * 0.3);
      push();
      textAlign(LEFT, CENTER);
      text(global.trees[0].name, 0.05 * SIZE, 0.3 * SIZE);
      pop();
      ref1 = range(8);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        i = ref1[l];
        ref2 = range(8);
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          j = ref2[m];
          piece = global.chess.board()[7 - i][j];
          this.squares[i * 8 + j].draw(piece, this.flipped, i * 8 + j === this.clickedSquares[0]);
        }
      }
      stroke('black');
      noFill();
      rect(SIZE * 4.5, SIZE * 4.5, SIZE * 8, SIZE * 8);
      this.littera();
      push();
      textAlign(CENTER, CENTER);
      if (global.index > 0) {
        text('move: ' + (1 + Math.floor(global.index / 2)) + "BW"[global.index % 2] + " of " + (1 + Math.floor(global.moves.length / 2)), 4.5 * SIZE, 10 * SIZE);
      }
      if (global.index === 0) {
        score = '0';
      }
      text(global.version, 7.5 * SIZE, 10 * SIZE);
      textAlign(RIGHT, CENTER);
      fill('white');
      text(score, 10.1 * SIZE, 0.3 * SIZE);
      pop();
      this.drawBars(score);
      return this.showChildren();
    }

    littera() {
      var digits, i, k, len, letters, ref, results;
      noStroke();
      fill('black');
      textSize(SIZE * 0.3);
      letters = this.flipped ? "hgfedcba" : "abcdefgh";
      digits = this.flipped ? "12345678" : "87654321";
      ref = range(8);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        text(letters[i], SIZE * (i + 1), SIZE * 8.8);
        results.push(text(digits[i], SIZE * 0.15, SIZE * (i + 1)));
      }
      return results;
    }

    flip() {
      return this.flipped = !this.flipped;
    }

    drawBars(score) {
      var h, w, x;
      param.String(score);
      stroke('black');
      h = calcBar(score);
      push();
      if (this.flipped) {
        translate(0, SIZE * 9);
        scale(1, -1);
      }
      rectMode(CORNER);
      noStroke();
      x = 0.35 * SIZE;
      w = 0.10 * SIZE;
      fill('black');
      rect(x, 0.5 * SIZE, w, SIZE * 4);
      fill('white');
      rect(x, 4.5 * SIZE, w, SIZE * 4);
      if (h > 0) {
        fill('white');
        rect(x, 4.5 * SIZE - h, w, h);
      } else {
        fill('black');
        rect(x, 4.5 * SIZE, w, -h);
      }
      return pop();
    }

  };

  calcBar = (score) => {
    var LIMIT, d, res;
    param.String(score);
    LIMIT = 2000;
    if (score[0] === '#') {
      d = LIMIT;
    } else {
      d = Math.abs(score);
    }
    if (d > LIMIT) {
      d = LIMIT;
    }
    res = lerp(0, 4 * SIZE, d / LIMIT);
    if (indexOf.call(score, "-") >= 0) {
      res = -res;
    }
    return param.Integer(Math.round(res));
  };

  ass(4 * SIZE, calcBar("2100"));

  ass(4 * SIZE, calcBar("2000"));

  ass(2 * SIZE, calcBar("1000"));

  ass(SIZE, calcBar("500"));

  ass(0, calcBar("1"));

  ass(-SIZE, calcBar("-500"));

  ass(-4 * SIZE, calcBar("#-1"));

  return Board;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-019-ChessTree\coffee\board.coffee