// Generated by CoffeeScript 2.5.1
var modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import _ from 'https://cdn.skypack.dev/lodash';

import {
  createSignal,
  createEffect,
  createMemo
} from "https://cdn.skypack.dev/solid-js@1.2.6";

import {
  createStore
} from "https://cdn.skypack.dev/solid-js@1.2.6/store";

import h from "https://cdn.skypack.dev/solid-js@1.2.6/h";

import {
  render
} from "https://cdn.skypack.dev/solid-js@1.2.6/web";

export var signal = createSignal;

export var effect = createEffect;

export var memo = createMemo;

export var param = {};

param.String = (v) => {
  if (!_.isString(v)) {
    return console.log((new Error(v + " is not a String")).stack);
  } else {
    return v;
  }
};

param.Number = (v) => {
  if (!_.isNumber(v)) {
    return console.log((new Error(v + " is not a Number")).stack);
  } else {
    return v;
  }
};

param.Integer = (v) => {
  if (!_.isInteger(v)) {
    return console.log((new Error(v + " is not an Integer")).stack);
  } else {
    return v;
  }
};

param.Boolean = (v) => {
  if (!_.isBoolean(v)) {
    return console.log((new Error(v + " is not a Boolean")).stack);
  } else {
    return v;
  }
};

param.Object = (v) => {
  if (!_.isObject(v)) {
    return console.log((new Error(v + " is not an Object")).stack);
  } else {
    return v;
  }
};

param.Array = (v) => {
  if (!_.isArray(v)) {
    return console.log((new Error(v + " is not an Array")).stack);
  } else {
    return v;
  }
};

param.Function = (v) => {
  if (!_.isFunction(v)) {
    return console.log((new Error(v + " is not a Function")).stack);
  } else {
    return v;
  }
};

param.Test = (test, msg = '') => {
  if (!test) {
    return console.log((new Error("param.Test failed:" + msg)).stack);
  }
};

param.Compact = (types, args) => {
  var i, j, ref, results;
  results = [];
  for (i = j = 0, ref = args.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
    if (types[i] === 'S') {
      param.String(args[i]);
    }
    if (types[i] === 'N') {
      param.Number(args[i]);
    }
    if (types[i] === 'I') {
      param.Integer(args[i]);
    }
    if (types[i] === 'B') {
      param.Boolean(args[i]);
    }
    if (types[i] === 'O') {
      param.Object(args[i]);
    }
    if (types[i] === 'A') {
      param.Array(args[i]);
    }
    if (types[i] === 'F') {
      results.push(param.Function(args[i]));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

export var N = 8;

export var ass = (a, b) => {
  if (!_.isEqual(a, b)) {
    log('assert failure:');
    log(a);
    return log(b);
  }
};

export var lerp = (a, b, ratio) => {
  param.Number(a);
  param.Number(b);
  param.Number(ratio);
  return param.Number(a + (b - a) * ratio);
};

export var split = function(s) {
  param.String(s);
  return param.Array(s === "" ? [] : s.split(" ")); // there is a bug in split
};

export var col = (n) => {
  return modulo(n, N);
};

export var row = (n) => {
  return Math.floor(n / N);
};

export var sum = (arr) => {
  return arr.reduce(((a, b) => {
    return a + b;
  }), 0);
};

export var r4r = (a) => {
  return render(a, document.getElementById("app"));
};

export var spaceShip = (a, b) => {
  if (a < b) {
    return -1;
  } else if (a > b) {
    return 1;
  } else {
    return 0;
  }
};

export var map = _.map;

export var range = _.range;

export var log = console.log;

export var abs = Math.abs;

export var a = (...a) => {
  return h("a", a);
};

export var button = (...a) => {
  return h("button", a);
};

export var circle = (...a) => {
  return h("circle", a);
};

export var defs = (...a) => {
  return h("defs", a);
};

export var div = (...a) => {
  return h("div", a);
};

export var ellipse = (...a) => {
  return h("ellipse", a);
};

export var figure = (...a) => {
  return h("figure", a);
};

export var figCaption = (...a) => {
  return h("figCaption", a);
};

export var form = (...a) => {
  return h("form", a);
};

export var g = (...a) => {
  return h("g", a);
};

export var h1 = (...a) => {
  return h("h1", a);
};

export var h3 = (...a) => {
  return h("h3", a);
};

export var header = (...a) => {
  return h("header", a);
};

export var img = (...a) => {
  return h("img", a);
};

export var input = (...a) => {
  return h("input", a);
};

export var li = (...a) => {
  return h("li", a);
};

export var linearGradient = (...a) => {
  return h("linearGradient", a);
};

export var option = (...a) => {
  return h("option", a);
};

export var p = (...a) => {
  return h("p", a);
};

export var table = (...a) => {
  return h("table", a);
};

export var tr = (...a) => {
  return h("tr", a);
};

export var td = (...a) => {
  return h("td", a);
};

export var rect = (...a) => {
  return h("rect", a);
};

export var select = (...a) => {
  return h("select", a);
};

export var stop = (...a) => {
  return h("stop", a);
};

export var strong = (...a) => {
  return h("strong", a);
};

export var svg = (...a) => {
  return h("svg", a);
};

export var text = (...a) => {
  return h("text", a);
};

export var ul = (...a) => {
  return h("ul", a);
};

export var Position = function(index) {
  return `${"abcdefgh"[col(index)]}${"87654321"[row(index)]}`;
};

export var createLocalStore = (name, init) => {
  var localState, setState, state;
  localState = localStorage.getItem(name);
  [state, setState] = createStore(localState ? JSON.parse(localState) : init);
  createEffect(() => {
    return localStorage.setItem(name, JSON.stringify(state));
  });
  return [state, setState];
};

export var removeIndex = (array, index) => {
  var b;
  // [...array.slice 0, index, ...array.slice index + 1]
  a = array.slice(0, index);
  b = array.slice(index + 1);
  console.log(a.concat(b));
  return a.concat(b);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcdXRpbHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBOztBQUFBLE9BQU8sQ0FBUCxNQUFBOztBQUVBLE9BQUE7RUFBUyxZQUFUO0VBQXVCLFlBQXZCO0VBQXFDLFVBQXJDO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsV0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxDQUFQLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7Q0FBQSxNQUFBOztBQUVBLE9BQUEsSUFBTyxNQUFBLEdBQVM7O0FBQ2hCLE9BQUEsSUFBTyxNQUFBLEdBQVM7O0FBQ2hCLE9BQUEsSUFBTyxJQUFBLEdBQU87O0FBRWQsT0FBQSxJQUFPLEtBQUEsR0FBUSxDQUFBOztBQUNmLEtBQUssQ0FBQyxNQUFOLEdBQWUsQ0FBQyxDQUFELENBQUEsR0FBQTtFQUFPLElBQUcsQ0FBSSxDQUFDLENBQUMsUUFBRixDQUFXLENBQVgsQ0FBUDtXQUF5QixPQUFPLENBQUMsR0FBUixDQUFZLENBQUMsSUFBSSxLQUFKLENBQVUsQ0FBQSxHQUFJLGtCQUFkLENBQUQsQ0FBa0MsQ0FBQyxLQUEvQyxFQUF6QjtHQUFBLE1BQUE7V0FBbUYsRUFBbkY7O0FBQVA7O0FBQ2YsS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFDLENBQUQsQ0FBQSxHQUFBO0VBQU8sSUFBRyxDQUFJLENBQUMsQ0FBQyxRQUFGLENBQVcsQ0FBWCxDQUFQO1dBQXlCLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQyxJQUFJLEtBQUosQ0FBVSxDQUFBLEdBQUksa0JBQWQsQ0FBRCxDQUFrQyxDQUFDLEtBQS9DLEVBQXpCO0dBQUEsTUFBQTtXQUFtRixFQUFuRjs7QUFBUDs7QUFDZixLQUFLLENBQUMsT0FBTixHQUFnQixDQUFDLENBQUQsQ0FBQSxHQUFBO0VBQU8sSUFBRyxDQUFJLENBQUMsQ0FBQyxTQUFGLENBQVksQ0FBWixDQUFQO1dBQTBCLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQyxJQUFJLEtBQUosQ0FBVSxDQUFBLEdBQUksb0JBQWQsQ0FBRCxDQUFvQyxDQUFDLEtBQWpELEVBQTFCO0dBQUEsTUFBQTtXQUFzRixFQUF0Rjs7QUFBUDs7QUFDaEIsS0FBSyxDQUFDLE9BQU4sR0FBZ0IsQ0FBQyxDQUFELENBQUEsR0FBQTtFQUFPLElBQUcsQ0FBSSxDQUFDLENBQUMsU0FBRixDQUFZLENBQVosQ0FBUDtXQUEwQixPQUFPLENBQUMsR0FBUixDQUFZLENBQUMsSUFBSSxLQUFKLENBQVUsQ0FBQSxHQUFJLG1CQUFkLENBQUQsQ0FBbUMsQ0FBQyxLQUFoRCxFQUExQjtHQUFBLE1BQUE7V0FBcUYsRUFBckY7O0FBQVA7O0FBQ2hCLEtBQUssQ0FBQyxNQUFOLEdBQWUsQ0FBQyxDQUFELENBQUEsR0FBQTtFQUFPLElBQUcsQ0FBSSxDQUFDLENBQUMsUUFBRixDQUFXLENBQVgsQ0FBUDtXQUF5QixPQUFPLENBQUMsR0FBUixDQUFZLENBQUMsSUFBSSxLQUFKLENBQVUsQ0FBQSxHQUFJLG1CQUFkLENBQUQsQ0FBbUMsQ0FBQyxLQUFoRCxFQUF6QjtHQUFBLE1BQUE7V0FBb0YsRUFBcEY7O0FBQVA7O0FBQ2YsS0FBSyxDQUFDLEtBQU4sR0FBYyxDQUFDLENBQUQsQ0FBQSxHQUFBO0VBQU8sSUFBRyxDQUFJLENBQUMsQ0FBQyxPQUFGLENBQVUsQ0FBVixDQUFQO1dBQXdCLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQyxJQUFJLEtBQUosQ0FBVSxDQUFBLEdBQUksa0JBQWQsQ0FBRCxDQUFrQyxDQUFDLEtBQS9DLEVBQXhCO0dBQUEsTUFBQTtXQUFrRixFQUFsRjs7QUFBUDs7QUFDZCxLQUFLLENBQUMsUUFBTixHQUFpQixDQUFDLENBQUQsQ0FBQSxHQUFBO0VBQU8sSUFBRyxDQUFJLENBQUMsQ0FBQyxVQUFGLENBQWEsQ0FBYixDQUFQO1dBQTJCLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQyxJQUFJLEtBQUosQ0FBVSxDQUFBLEdBQUksb0JBQWQsQ0FBRCxDQUFvQyxDQUFDLEtBQWpELEVBQTNCO0dBQUEsTUFBQTtXQUF1RixFQUF2Rjs7QUFBUDs7QUFDakIsS0FBSyxDQUFDLElBQU4sR0FBYSxDQUFDLElBQUQsRUFBTSxNQUFJLEVBQVYsQ0FBQSxHQUFBO0VBQWlCLElBQUcsQ0FBSSxJQUFQO1dBQWlCLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQyxJQUFJLEtBQUosQ0FBVSxvQkFBQSxHQUF1QixHQUFqQyxDQUFELENBQXNDLENBQUMsS0FBbkQsRUFBakI7O0FBQWpCOztBQUNiLEtBQUssQ0FBQyxPQUFOLEdBQWdCLENBQUMsS0FBRCxFQUFPLElBQVAsQ0FBQSxHQUFBO0FBQ2hCLE1BQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7QUFBQztFQUFBLEtBQVMsNEZBQVQ7SUFDQyxJQUFHLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBWSxHQUFmO01BQXdCLEtBQUssQ0FBQyxNQUFOLENBQWEsSUFBSSxDQUFDLENBQUQsQ0FBakIsRUFBeEI7O0lBQ0EsSUFBRyxLQUFLLENBQUMsQ0FBRCxDQUFMLEtBQVksR0FBZjtNQUF3QixLQUFLLENBQUMsTUFBTixDQUFhLElBQUksQ0FBQyxDQUFELENBQWpCLEVBQXhCOztJQUNBLElBQUcsS0FBSyxDQUFDLENBQUQsQ0FBTCxLQUFZLEdBQWY7TUFBd0IsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFJLENBQUMsQ0FBRCxDQUFsQixFQUF4Qjs7SUFDQSxJQUFHLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBWSxHQUFmO01BQXdCLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBSSxDQUFDLENBQUQsQ0FBbEIsRUFBeEI7O0lBQ0EsSUFBRyxLQUFLLENBQUMsQ0FBRCxDQUFMLEtBQVksR0FBZjtNQUF3QixLQUFLLENBQUMsTUFBTixDQUFhLElBQUksQ0FBQyxDQUFELENBQWpCLEVBQXhCOztJQUNBLElBQUcsS0FBSyxDQUFDLENBQUQsQ0FBTCxLQUFZLEdBQWY7TUFBd0IsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFJLENBQUMsQ0FBRCxDQUFoQixFQUF4Qjs7SUFDQSxJQUFHLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBWSxHQUFmO21CQUF3QixLQUFLLENBQUMsUUFBTixDQUFlLElBQUksQ0FBQyxDQUFELENBQW5CLEdBQXhCO0tBQUEsTUFBQTsyQkFBQTs7RUFQRCxDQUFBOztBQURlOztBQVVoQixPQUFBLElBQU8sQ0FBQSxHQUFJOztBQUVYLE9BQUEsSUFBTyxHQUFBLEdBQU0sQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBLEdBQUE7RUFDWixJQUFHLENBQUksQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFWLEVBQVksQ0FBWixDQUFQO0lBQ0MsR0FBQSxDQUFJLGlCQUFKO0lBQ0EsR0FBQSxDQUFJLENBQUo7V0FDQSxHQUFBLENBQUksQ0FBSixFQUhEOztBQURZOztBQU1iLE9BQUEsSUFBTyxJQUFBLEdBQU8sQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLEtBQUwsQ0FBQSxHQUFBO0VBQ2IsS0FBSyxDQUFDLE1BQU4sQ0FBYSxDQUFiO0VBQ0EsS0FBSyxDQUFDLE1BQU4sQ0FBYSxDQUFiO0VBQ0EsS0FBSyxDQUFDLE1BQU4sQ0FBYSxLQUFiO1NBQ0EsS0FBSyxDQUFDLE1BQU4sQ0FBYSxDQUFBLEdBQUksQ0FBQyxDQUFBLEdBQUUsQ0FBSCxDQUFBLEdBQU0sS0FBdkI7QUFKYTs7QUFNZCxPQUFBLElBQU8sS0FBQSxHQUFRLFFBQUEsQ0FBQyxDQUFELENBQUE7RUFDZCxLQUFLLENBQUMsTUFBTixDQUFhLENBQWI7U0FDQSxLQUFLLENBQUMsS0FBTixDQUFlLENBQUEsS0FBRyxFQUFOLEdBQWMsRUFBZCxHQUFzQixDQUFDLENBQUMsS0FBRixDQUFRLEdBQVIsQ0FBbEMsRUFGYztBQUFBOztBQUlmLE9BQUEsSUFBTyxHQUFBLEdBQU0sQ0FBQyxDQUFELENBQUEsR0FBQTtnQkFBTyxHQUFLO0FBQVo7O0FBQ2IsT0FBQSxJQUFPLEdBQUEsR0FBTSxDQUFDLENBQUQsQ0FBQSxHQUFBO29CQUFPLElBQUs7QUFBWjs7QUFDYixPQUFBLElBQU8sR0FBQSxHQUFNLENBQUMsR0FBRCxDQUFBLEdBQUE7U0FBUyxHQUFHLENBQUMsTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFBLEdBQUE7V0FBVSxDQUFBLEdBQUk7RUFBZCxDQUFELENBQVgsRUFBOEIsQ0FBOUI7QUFBVDs7QUFDYixPQUFBLElBQU8sR0FBQSxHQUFNLENBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBTyxNQUFBLENBQU8sQ0FBUCxFQUFVLFFBQVEsQ0FBQyxjQUFULENBQXdCLEtBQXhCLENBQVY7QUFBUDs7QUFDYixPQUFBLElBQU8sU0FBQSxHQUFZLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBQSxHQUFBO0VBQVMsSUFBRyxDQUFBLEdBQUksQ0FBUDtXQUFjLENBQUMsRUFBZjtHQUFBLE1BQXNCLElBQUcsQ0FBQSxHQUFJLENBQVA7V0FBYyxFQUFkO0dBQUEsTUFBQTtXQUFxQixFQUFyQjs7QUFBL0I7O0FBRW5CLE9BQUEsSUFBTyxHQUFBLEdBQU0sQ0FBQyxDQUFDOztBQUNmLE9BQUEsSUFBTyxLQUFBLEdBQVEsQ0FBQyxDQUFDOztBQUNqQixPQUFBLElBQU8sR0FBQSxHQUFNLE9BQU8sQ0FBQzs7QUFDckIsT0FBQSxJQUFPLEdBQUEsR0FBTSxJQUFJLENBQUM7O0FBRWxCLE9BQUEsSUFBTyxDQUFBLEdBQUksQ0FBQSxHQUFDLENBQUQsQ0FBQSxHQUFBO1NBQVUsQ0FBQSxDQUFFLEdBQUYsRUFBTyxDQUFQO0FBQVY7O0FBQ1gsT0FBQSxJQUFPLE1BQUEsR0FBUyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsUUFBRixFQUFZLENBQVo7QUFBVjs7QUFDaEIsT0FBQSxJQUFPLE1BQUEsR0FBUyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsUUFBRixFQUFZLENBQVo7QUFBVjs7QUFDaEIsT0FBQSxJQUFPLElBQUEsR0FBTyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsTUFBRixFQUFVLENBQVY7QUFBVjs7QUFDZCxPQUFBLElBQU8sR0FBQSxHQUFNLENBQUEsR0FBQyxDQUFELENBQUEsR0FBQTtTQUFVLENBQUEsQ0FBRSxLQUFGLEVBQVMsQ0FBVDtBQUFWOztBQUNiLE9BQUEsSUFBTyxPQUFBLEdBQVUsQ0FBQSxHQUFDLENBQUQsQ0FBQSxHQUFBO1NBQVUsQ0FBQSxDQUFFLFNBQUYsRUFBYSxDQUFiO0FBQVY7O0FBQ2pCLE9BQUEsSUFBTyxNQUFBLEdBQVMsQ0FBQSxHQUFDLENBQUQsQ0FBQSxHQUFBO1NBQVUsQ0FBQSxDQUFFLFFBQUYsRUFBWSxDQUFaO0FBQVY7O0FBQ2hCLE9BQUEsSUFBTyxVQUFBLEdBQWEsQ0FBQSxHQUFDLENBQUQsQ0FBQSxHQUFBO1NBQVUsQ0FBQSxDQUFFLFlBQUYsRUFBZ0IsQ0FBaEI7QUFBVjs7QUFDcEIsT0FBQSxJQUFPLElBQUEsR0FBTyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsTUFBRixFQUFVLENBQVY7QUFBVjs7QUFDZCxPQUFBLElBQU8sQ0FBQSxHQUFJLENBQUEsR0FBQyxDQUFELENBQUEsR0FBQTtTQUFVLENBQUEsQ0FBRSxHQUFGLEVBQU8sQ0FBUDtBQUFWOztBQUNYLE9BQUEsSUFBTyxFQUFBLEdBQUssQ0FBQSxHQUFDLENBQUQsQ0FBQSxHQUFBO1NBQVUsQ0FBQSxDQUFFLElBQUYsRUFBUSxDQUFSO0FBQVY7O0FBQ1osT0FBQSxJQUFPLEVBQUEsR0FBSyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsSUFBRixFQUFRLENBQVI7QUFBVjs7QUFDWixPQUFBLElBQU8sTUFBQSxHQUFTLENBQUEsR0FBQyxDQUFELENBQUEsR0FBQTtTQUFVLENBQUEsQ0FBRSxRQUFGLEVBQVcsQ0FBWDtBQUFWOztBQUNoQixPQUFBLElBQU8sR0FBQSxHQUFNLENBQUEsR0FBQyxDQUFELENBQUEsR0FBQTtTQUFVLENBQUEsQ0FBRSxLQUFGLEVBQVMsQ0FBVDtBQUFWOztBQUNiLE9BQUEsSUFBTyxLQUFBLEdBQVEsQ0FBQSxHQUFDLENBQUQsQ0FBQSxHQUFBO1NBQVUsQ0FBQSxDQUFFLE9BQUYsRUFBVyxDQUFYO0FBQVY7O0FBQ2YsT0FBQSxJQUFPLEVBQUEsR0FBSyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsSUFBRixFQUFRLENBQVI7QUFBVjs7QUFDWixPQUFBLElBQU8sY0FBQSxHQUFpQixDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsZ0JBQUYsRUFBb0IsQ0FBcEI7QUFBVjs7QUFDeEIsT0FBQSxJQUFPLE1BQUEsR0FBUyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsUUFBRixFQUFZLENBQVo7QUFBVjs7QUFDaEIsT0FBQSxJQUFPLENBQUEsR0FBSSxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsR0FBRixFQUFPLENBQVA7QUFBVjs7QUFDWCxPQUFBLElBQU8sS0FBQSxHQUFRLENBQUEsR0FBQyxDQUFELENBQUEsR0FBQTtTQUFVLENBQUEsQ0FBRSxPQUFGLEVBQVcsQ0FBWDtBQUFWOztBQUNmLE9BQUEsSUFBTyxFQUFBLEdBQUssQ0FBQSxHQUFDLENBQUQsQ0FBQSxHQUFBO1NBQVUsQ0FBQSxDQUFFLElBQUYsRUFBUSxDQUFSO0FBQVY7O0FBQ1osT0FBQSxJQUFPLEVBQUEsR0FBSyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsSUFBRixFQUFRLENBQVI7QUFBVjs7QUFDWixPQUFBLElBQU8sSUFBQSxHQUFTLENBQUEsR0FBQyxDQUFELENBQUEsR0FBQTtTQUFVLENBQUEsQ0FBRSxNQUFGLEVBQVMsQ0FBVDtBQUFWOztBQUNoQixPQUFBLElBQU8sTUFBQSxHQUFTLENBQUEsR0FBQyxDQUFELENBQUEsR0FBQTtTQUFVLENBQUEsQ0FBRSxRQUFGLEVBQVksQ0FBWjtBQUFWOztBQUNoQixPQUFBLElBQU8sSUFBQSxHQUFPLENBQUEsR0FBQyxDQUFELENBQUEsR0FBQTtTQUFVLENBQUEsQ0FBRSxNQUFGLEVBQVUsQ0FBVjtBQUFWOztBQUNkLE9BQUEsSUFBTyxNQUFBLEdBQVMsQ0FBQSxHQUFDLENBQUQsQ0FBQSxHQUFBO1NBQVUsQ0FBQSxDQUFFLFFBQUYsRUFBWSxDQUFaO0FBQVY7O0FBQ2hCLE9BQUEsSUFBTyxHQUFBLEdBQU0sQ0FBQSxHQUFDLENBQUQsQ0FBQSxHQUFBO1NBQVUsQ0FBQSxDQUFFLEtBQUYsRUFBUyxDQUFUO0FBQVY7O0FBQ2IsT0FBQSxJQUFPLElBQUEsR0FBUyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsTUFBRixFQUFTLENBQVQ7QUFBVjs7QUFDaEIsT0FBQSxJQUFPLEVBQUEsR0FBSyxDQUFBLEdBQUMsQ0FBRCxDQUFBLEdBQUE7U0FBVSxDQUFBLENBQUUsSUFBRixFQUFRLENBQVI7QUFBVjs7QUFFWixPQUFBLElBQU8sUUFBQSxHQUFXLFFBQUEsQ0FBQyxLQUFELENBQUE7U0FBVyxDQUFBLENBQUEsQ0FBRyxVQUFVLENBQUMsR0FBQSxDQUFJLEtBQUosQ0FBRCxDQUFiLENBQUEsQ0FBQSxDQUEyQixVQUFVLENBQUMsR0FBQSxDQUFJLEtBQUosQ0FBRCxDQUFyQyxDQUFBO0FBQVg7O0FBRWxCLE9BQUEsSUFBTyxnQkFBQSxHQUFtQixDQUFDLElBQUQsRUFBTSxJQUFOLENBQUEsR0FBQTtBQUMxQixNQUFBLFVBQUEsRUFBQSxRQUFBLEVBQUE7RUFBQyxVQUFBLEdBQWEsWUFBWSxDQUFDLE9BQWIsQ0FBcUIsSUFBckI7RUFDYixDQUFDLEtBQUQsRUFBUSxRQUFSLENBQUEsR0FBb0IsV0FBQSxDQUFlLFVBQUgsR0FBbUIsSUFBSSxDQUFDLEtBQUwsQ0FBVyxVQUFYLENBQW5CLEdBQThDLElBQTFEO0VBQ3BCLFlBQUEsQ0FBYSxDQUFBLENBQUEsR0FBQTtXQUFNLFlBQVksQ0FBQyxPQUFiLENBQXFCLElBQXJCLEVBQTJCLElBQUksQ0FBQyxTQUFMLENBQWUsS0FBZixDQUEzQjtFQUFOLENBQWI7U0FDQSxDQUFDLEtBQUQsRUFBUSxRQUFSO0FBSnlCOztBQU0xQixPQUFBLElBQU8sV0FBQSxHQUFjLENBQUMsS0FBRCxFQUFRLEtBQVIsQ0FBQSxHQUFBO0FBQ3JCLE1BQUEsQ0FBQTs7RUFDQyxDQUFBLEdBQUksS0FBSyxDQUFDLEtBQU4sQ0FBWSxDQUFaLEVBQWUsS0FBZjtFQUNKLENBQUEsR0FBSSxLQUFLLENBQUMsS0FBTixDQUFZLEtBQUEsR0FBUSxDQUFwQjtFQUNKLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBQyxDQUFDLE1BQUYsQ0FBUyxDQUFULENBQVo7U0FDQSxDQUFDLENBQUMsTUFBRixDQUFTLENBQVQ7QUFMb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyAgICAgICAgICAgICAgICBmcm9tICdodHRwczovL2Nkbi5za3lwYWNrLmRldi9sb2Rhc2gnXHJcblxyXG5pbXBvcnQgeyBjcmVhdGVTaWduYWwsIGNyZWF0ZUVmZmVjdCwgY3JlYXRlTWVtbyB9IGZyb20gXCJodHRwczovL2Nkbi5za3lwYWNrLmRldi9zb2xpZC1qc0AxLjIuNlwiXHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlIH0gIGZyb20gXCJodHRwczovL2Nkbi5za3lwYWNrLmRldi9zb2xpZC1qc0AxLjIuNi9zdG9yZVwiXHJcbmltcG9ydCBoICAgICAgICAgICAgICAgIGZyb20gXCJodHRwczovL2Nkbi5za3lwYWNrLmRldi9zb2xpZC1qc0AxLjIuNi9oXCJcclxuaW1wb3J0IHsgcmVuZGVyIH0gICAgICAgZnJvbSBcImh0dHBzOi8vY2RuLnNreXBhY2suZGV2L3NvbGlkLWpzQDEuMi42L3dlYlwiXHJcblxyXG5leHBvcnQgc2lnbmFsID0gY3JlYXRlU2lnbmFsXHJcbmV4cG9ydCBlZmZlY3QgPSBjcmVhdGVFZmZlY3RcclxuZXhwb3J0IG1lbW8gPSBjcmVhdGVNZW1vXHJcblxyXG5leHBvcnQgcGFyYW0gPSB7fVxyXG5wYXJhbS5TdHJpbmcgPSAodikgPT4gaWYgbm90IF8uaXNTdHJpbmcgdiB0aGVuIGNvbnNvbGUubG9nIChuZXcgRXJyb3IgdiArIFwiIGlzIG5vdCBhIFN0cmluZ1wiKS5zdGFjayBlbHNlIHZcclxucGFyYW0uTnVtYmVyID0gKHYpID0+IGlmIG5vdCBfLmlzTnVtYmVyIHYgdGhlbiBjb25zb2xlLmxvZyAobmV3IEVycm9yIHYgKyBcIiBpcyBub3QgYSBOdW1iZXJcIikuc3RhY2sgZWxzZSB2XHJcbnBhcmFtLkludGVnZXIgPSAodikgPT4gaWYgbm90IF8uaXNJbnRlZ2VyIHYgdGhlbiBjb25zb2xlLmxvZyAobmV3IEVycm9yIHYgKyBcIiBpcyBub3QgYW4gSW50ZWdlclwiKS5zdGFjayBlbHNlIHZcclxucGFyYW0uQm9vbGVhbiA9ICh2KSA9PiBpZiBub3QgXy5pc0Jvb2xlYW4gdiB0aGVuIGNvbnNvbGUubG9nIChuZXcgRXJyb3IgdiArIFwiIGlzIG5vdCBhIEJvb2xlYW5cIikuc3RhY2sgZWxzZSB2XHJcbnBhcmFtLk9iamVjdCA9ICh2KSA9PiBpZiBub3QgXy5pc09iamVjdCB2IHRoZW4gY29uc29sZS5sb2cgKG5ldyBFcnJvciB2ICsgXCIgaXMgbm90IGFuIE9iamVjdFwiKS5zdGFjayBlbHNlIHZcclxucGFyYW0uQXJyYXkgPSAodikgPT4gaWYgbm90IF8uaXNBcnJheSB2IHRoZW4gY29uc29sZS5sb2cgKG5ldyBFcnJvciB2ICsgXCIgaXMgbm90IGFuIEFycmF5XCIpLnN0YWNrIGVsc2UgdlxyXG5wYXJhbS5GdW5jdGlvbiA9ICh2KSA9PiBpZiBub3QgXy5pc0Z1bmN0aW9uIHYgdGhlbiBjb25zb2xlLmxvZyAobmV3IEVycm9yIHYgKyBcIiBpcyBub3QgYSBGdW5jdGlvblwiKS5zdGFjayBlbHNlIHZcclxucGFyYW0uVGVzdCA9ICh0ZXN0LG1zZz0nJykgPT4gaWYgbm90IHRlc3QgdGhlbiBjb25zb2xlLmxvZyAobmV3IEVycm9yIFwicGFyYW0uVGVzdCBmYWlsZWQ6XCIgKyBtc2cpLnN0YWNrXHJcbnBhcmFtLkNvbXBhY3QgPSAodHlwZXMsYXJncykgPT5cclxuXHRmb3IgaSBpbiBbMC4uYXJncy5sZW5ndGgtMV1cclxuXHRcdGlmIHR5cGVzW2ldID09ICdTJyB0aGVuIHBhcmFtLlN0cmluZyBhcmdzW2ldXHJcblx0XHRpZiB0eXBlc1tpXSA9PSAnTicgdGhlbiBwYXJhbS5OdW1iZXIgYXJnc1tpXVxyXG5cdFx0aWYgdHlwZXNbaV0gPT0gJ0knIHRoZW4gcGFyYW0uSW50ZWdlciBhcmdzW2ldXHJcblx0XHRpZiB0eXBlc1tpXSA9PSAnQicgdGhlbiBwYXJhbS5Cb29sZWFuIGFyZ3NbaV1cclxuXHRcdGlmIHR5cGVzW2ldID09ICdPJyB0aGVuIHBhcmFtLk9iamVjdCBhcmdzW2ldXHJcblx0XHRpZiB0eXBlc1tpXSA9PSAnQScgdGhlbiBwYXJhbS5BcnJheSBhcmdzW2ldXHJcblx0XHRpZiB0eXBlc1tpXSA9PSAnRicgdGhlbiBwYXJhbS5GdW5jdGlvbiBhcmdzW2ldXHJcblxyXG5leHBvcnQgTiA9IDhcclxuXHJcbmV4cG9ydCBhc3MgPSAoYSxiKSA9PlxyXG5cdGlmIG5vdCBfLmlzRXF1YWwgYSxiXHJcblx0XHRsb2cgJ2Fzc2VydCBmYWlsdXJlOidcclxuXHRcdGxvZyBhXHJcblx0XHRsb2cgYlxyXG5cclxuZXhwb3J0IGxlcnAgPSAoYSxiLHJhdGlvKSA9PiBcclxuXHRwYXJhbS5OdW1iZXIgYVxyXG5cdHBhcmFtLk51bWJlciBiXHJcblx0cGFyYW0uTnVtYmVyIHJhdGlvXHJcblx0cGFyYW0uTnVtYmVyIGEgKyAoYi1hKSpyYXRpb1xyXG5cclxuZXhwb3J0IHNwbGl0ID0gKHMpIC0+XHJcblx0cGFyYW0uU3RyaW5nIHNcclxuXHRwYXJhbS5BcnJheSBpZiBzPT1cIlwiIHRoZW4gW10gZWxzZSBzLnNwbGl0IFwiIFwiICMgdGhlcmUgaXMgYSBidWcgaW4gc3BsaXRcclxuXHJcbmV4cG9ydCBjb2wgPSAobikgPT4gbiAlJSBOXHJcbmV4cG9ydCByb3cgPSAobikgPT4gbiAvLyBOXHJcbmV4cG9ydCBzdW0gPSAoYXJyKSA9PiBhcnIucmVkdWNlKCgoYSwgYikgPT4gYSArIGIpLCAwKVxyXG5leHBvcnQgcjRyID0gKGEpID0+IHJlbmRlciBhLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcImFwcFwiXHJcbmV4cG9ydCBzcGFjZVNoaXAgPSAoYSxiKSA9PiBpZiBhIDwgYiB0aGVuIC0xIGVsc2UgaWYgYSA+IGIgdGhlbiAxIGVsc2UgMFxyXG5cclxuZXhwb3J0IG1hcCA9IF8ubWFwXHJcbmV4cG9ydCByYW5nZSA9IF8ucmFuZ2VcclxuZXhwb3J0IGxvZyA9IGNvbnNvbGUubG9nXHJcbmV4cG9ydCBhYnMgPSBNYXRoLmFic1xyXG5cclxuZXhwb3J0IGEgPSAoYS4uLikgPT4gaCBcImFcIiwgYVxyXG5leHBvcnQgYnV0dG9uID0gKGEuLi4pID0+IGggXCJidXR0b25cIiwgYVxyXG5leHBvcnQgY2lyY2xlID0gKGEuLi4pID0+IGggXCJjaXJjbGVcIiwgYVxyXG5leHBvcnQgZGVmcyA9IChhLi4uKSA9PiBoIFwiZGVmc1wiLCBhXHJcbmV4cG9ydCBkaXYgPSAoYS4uLikgPT4gaCBcImRpdlwiLCBhXHJcbmV4cG9ydCBlbGxpcHNlID0gKGEuLi4pID0+IGggXCJlbGxpcHNlXCIsIGFcclxuZXhwb3J0IGZpZ3VyZSA9IChhLi4uKSA9PiBoIFwiZmlndXJlXCIsIGFcclxuZXhwb3J0IGZpZ0NhcHRpb24gPSAoYS4uLikgPT4gaCBcImZpZ0NhcHRpb25cIiwgYVxyXG5leHBvcnQgZm9ybSA9IChhLi4uKSA9PiBoIFwiZm9ybVwiLCBhXHJcbmV4cG9ydCBnID0gKGEuLi4pID0+IGggXCJnXCIsIGFcclxuZXhwb3J0IGgxID0gKGEuLi4pID0+IGggXCJoMVwiLCBhXHJcbmV4cG9ydCBoMyA9IChhLi4uKSA9PiBoIFwiaDNcIiwgYVxyXG5leHBvcnQgaGVhZGVyID0gKGEuLi4pID0+IGggXCJoZWFkZXJcIixhXHJcbmV4cG9ydCBpbWcgPSAoYS4uLikgPT4gaCBcImltZ1wiLCBhXHJcbmV4cG9ydCBpbnB1dCA9IChhLi4uKSA9PiBoIFwiaW5wdXRcIiwgYVxyXG5leHBvcnQgbGkgPSAoYS4uLikgPT4gaCBcImxpXCIsIGFcclxuZXhwb3J0IGxpbmVhckdyYWRpZW50ID0gKGEuLi4pID0+IGggXCJsaW5lYXJHcmFkaWVudFwiLCBhXHJcbmV4cG9ydCBvcHRpb24gPSAoYS4uLikgPT4gaCBcIm9wdGlvblwiLCBhXHJcbmV4cG9ydCBwID0gKGEuLi4pID0+IGggXCJwXCIsIGFcclxuZXhwb3J0IHRhYmxlID0gKGEuLi4pID0+IGggXCJ0YWJsZVwiLCBhXHJcbmV4cG9ydCB0ciA9IChhLi4uKSA9PiBoIFwidHJcIiwgYVxyXG5leHBvcnQgdGQgPSAoYS4uLikgPT4gaCBcInRkXCIsIGFcclxuZXhwb3J0IHJlY3QgICA9IChhLi4uKSA9PiBoIFwicmVjdFwiLGFcclxuZXhwb3J0IHNlbGVjdCA9IChhLi4uKSA9PiBoIFwic2VsZWN0XCIsIGFcclxuZXhwb3J0IHN0b3AgPSAoYS4uLikgPT4gaCBcInN0b3BcIiwgYVxyXG5leHBvcnQgc3Ryb25nID0gKGEuLi4pID0+IGggXCJzdHJvbmdcIiwgYVxyXG5leHBvcnQgc3ZnID0gKGEuLi4pID0+IGggXCJzdmdcIiwgYVxyXG5leHBvcnQgdGV4dCAgID0gKGEuLi4pID0+IGggXCJ0ZXh0XCIsYVxyXG5leHBvcnQgdWwgPSAoYS4uLikgPT4gaCBcInVsXCIsIGFcclxuXHJcbmV4cG9ydCBQb3NpdGlvbiA9IChpbmRleCkgLT4gXCIje1wiYWJjZGVmZ2hcIltjb2wgaW5kZXhdfSN7XCI4NzY1NDMyMVwiW3JvdyBpbmRleF19XCJcclxuXHJcbmV4cG9ydCBjcmVhdGVMb2NhbFN0b3JlID0gKG5hbWUsaW5pdCkgPT5cclxuXHRsb2NhbFN0YXRlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0gbmFtZVxyXG5cdFtzdGF0ZSwgc2V0U3RhdGVdID0gY3JlYXRlU3RvcmUgaWYgbG9jYWxTdGF0ZSB0aGVuIEpTT04ucGFyc2UgbG9jYWxTdGF0ZSBlbHNlIGluaXRcclxuXHRjcmVhdGVFZmZlY3QgKCkgPT4gbG9jYWxTdG9yYWdlLnNldEl0ZW0gbmFtZSwgSlNPTi5zdHJpbmdpZnkgc3RhdGVcclxuXHRbc3RhdGUsIHNldFN0YXRlXVxyXG5cclxuZXhwb3J0IHJlbW92ZUluZGV4ID0gKGFycmF5LCBpbmRleCkgPT5cclxuXHQjIFsuLi5hcnJheS5zbGljZSAwLCBpbmRleCwgLi4uYXJyYXkuc2xpY2UgaW5kZXggKyAxXVxyXG5cdGEgPSBhcnJheS5zbGljZSAwLCBpbmRleCBcclxuXHRiID0gYXJyYXkuc2xpY2UgaW5kZXggKyAxXHJcblx0Y29uc29sZS5sb2cgYS5jb25jYXQgYlxyXG5cdGEuY29uY2F0IGJcclxuIl19
//# sourceURL=c:\github\2023-019-ChessTree\coffee\utils.coffee