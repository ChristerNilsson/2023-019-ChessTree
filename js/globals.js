// Generated by CoffeeScript 2.5.1
var f, g, pgdn, pgup, undo,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

export var global = {
  version: 'ver: B',
  board: null,
  index: 0,
  SIZE: 50, // of square
  pics: {}, // 12 pjÃ¤ser
  moves: [],
  data: null,
  buttons: [],
  database: {},
  currTree: 0, // index till trÃ¤den
  currNode: null, // pekar in i ett trÃ¤d
  stack: []
};

import {
  ass,
  log,
  range,
  split,
  param,
  hexToBase64
} from '../js/utils.js';

import {
  Button
} from '../js/button.js';

import _ from 'https://cdn.skypack.dev/lodash';

import cryptoJs from 'https://cdn.skypack.dev/crypto-js';

export var coords = (uci) => {
  var c0, c1, r0, r1;
  param.String(uci);
  c0 = "abcdefgh".indexOf(uci[0]);
  r0 = "12345678".indexOf(uci[1]);
  c1 = "abcdefgh".indexOf(uci[2]);
  r1 = "12345678".indexOf(uci[3]);
  return param.Array([c0 + 8 * r0, c1 + 8 * r1]);
};

ass([8, 24], coords("a2a4"));

export var toUCI = ([from, to]) => {
  var c0, c1, r0, r1;
  param.Integer(from);
  param.Integer(to);
  c0 = "abcdefgh"[from % 8];
  r0 = "12345678"[Math.floor(from / 8)];
  c1 = "abcdefgh"[to % 8];
  r1 = "12345678"[Math.floor(to / 8)];
  return param.String(c0 + r0 + c1 + r1);
};

ass("e2e4", toUCI([12, 28]));

export var toObjectNotation = ([from, to]) => {
  var uci;
  param.Integer(from);
  param.Integer(to);
  uci = toUCI([from, to]);
  from = uci.slice(0, 2);
  to = uci.slice(2, 4);
  return param.Object({from, to});
};

ass({
  from: 'e2',
  to: 'e4'
}, toObjectNotation([12, 28]));

export var empty = (n) => {
  param.Integer(n);
  return param.String((1 + Math.floor(n / 8)).toString());
};

pgup = () => {
  return loadTree(1);
};

pgdn = () => {
  return loadTree(-1);
};

undo = () => {
  global.chess.undo();
  return global.currNode = global.stack.pop();
};

// dumpState()
export var dumpState = () => {
  console.log('STATE ########');
  console.log('  stack', global.stack);
  console.log('  currNode', global.currNode);
  return console.log('  history', global.chess.history());
};

export var loadTree = (delta) => {
  var keys;
  param.Test(delta === (-1) || delta === 0 || delta === 1);
  global.currTree = modulo(global.currTree + delta, _.size(global.trees));
  keys = _.keys(global.trees);
  global.tree = global.trees[keys[global.currTree]];
  global.currNode = global.tree.moves[""];
  return global.stack = []; //.push global.currNode
};

//dumpState()
g = (item) => {
  // param.Integer item or param.String
  if (indexOf.call(item, "#-") >= 0) {
    return -1000;
  }
  if (indexOf.call(item, "#") >= 0) {
    return 1000;
  }
  return param.Integer(parseInt(item));
};

f = (arrScore, c) => {
  var a, b, d;
  param.Array(arrScore);
  param.String(c);
  arrScore = _.map(arrScore, (item) => {
    return g(item);
  });
  a = _.min(arrScore);
  b = _.max(arrScore);
  c = g(c);
  d = _.max([Math.abs(a), Math.abs(b)]);
  a = -d;
  return param.Number((c - a) / (2 * d));
};

ass(0, f([-100, 50], '-100'));

ass(0.75, f([-100, 50], '50'));

ass(1, f([-100, 50], '100'));

export var clickString = (key) => {
  param.String(key);
  if (key === 'flip') {
    return global.board.flip();
  } else if (key === 'link') {
    return window.open(data.link, '_blank');
  } else if (key === 'up') {
    return fixSuper(-1);
  } else if (key === 'down') {
    return fixSuper(1);
  } else if (key === 'pgup') {
    return pgup();
  } else if (key === 'pgdn') {
    return pgdn();
  } else if (key === 'undo') {
    return undo();
  } else {
    return console.log('unknown key in clickString', key);
  }
};

export var getMove = (index) => {
  param.Test((-1 <= index && index <= global.moves.length));
  if (index === -1) {
    return param.Object({
      score: '',
      uci: '',
      san: '',
      superiors: [],
      superiorsSan: []
    });
  } else {
    return param.Object(global.moves[index]);
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFscy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxnbG9iYWxzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQTtFQUFBOzs7QUFBQSxPQUFBLElBQU8sTUFBQSxHQUFTO0VBQ2YsT0FBQSxFQUFRLFFBRE87RUFFZixLQUFBLEVBQU0sSUFGUztFQUdmLEtBQUEsRUFBTSxDQUhTO0VBSWYsSUFBQSxFQUFLLEVBSlU7RUFLZixJQUFBLEVBQUssQ0FBQSxDQUxVO0VBTWYsS0FBQSxFQUFNLEVBTlM7RUFPZixJQUFBLEVBQUssSUFQVTtFQVFmLE9BQUEsRUFBUSxFQVJPO0VBU2YsUUFBQSxFQUFVLENBQUEsQ0FUSztFQVVmLFFBQUEsRUFBUyxDQVZNO0VBV2YsUUFBQSxFQUFTLElBWE07RUFZZixLQUFBLEVBQU07QUFaUzs7QUFlaEIsT0FBQTtFQUFRLEdBQVI7RUFBWSxHQUFaO0VBQWdCLEtBQWhCO0VBQXNCLEtBQXRCO0VBQTRCLEtBQTVCO0VBQWtDLFdBQWxDO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsTUFBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBTyxDQUFQLE1BQUE7O0FBQ0EsT0FBTyxRQUFQLE1BQUE7O0FBRUEsT0FBQSxJQUFPLE1BQUEsR0FBUyxDQUFDLEdBQUQsQ0FBQSxHQUFBO0FBQ2hCLE1BQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUE7RUFBQyxLQUFLLENBQUMsTUFBTixDQUFhLEdBQWI7RUFDQSxFQUFBLEdBQUssVUFBVSxDQUFDLE9BQVgsQ0FBbUIsR0FBRyxDQUFDLENBQUQsQ0FBdEI7RUFDTCxFQUFBLEdBQUssVUFBVSxDQUFDLE9BQVgsQ0FBbUIsR0FBRyxDQUFDLENBQUQsQ0FBdEI7RUFDTCxFQUFBLEdBQUssVUFBVSxDQUFDLE9BQVgsQ0FBbUIsR0FBRyxDQUFDLENBQUQsQ0FBdEI7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QSxFQUF0QjtHQUFBLE1BQ0EsSUFBRyxHQUFBLEtBQU8sTUFBVjtXQUFzQixJQUFBLENBQUEsRUFBdEI7R0FBQSxNQUNBLElBQUcsR0FBQSxLQUFPLE1BQVY7V0FBc0IsSUFBQSxDQUFBLEVBQXRCO0dBQUEsTUFBQTtXQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksNEJBQVosRUFBeUMsR0FBekMsRUFEQTs7QUFSZTs7QUFXckIsT0FBQSxJQUFPLE9BQUEsR0FBVSxDQUFDLEtBQUQsQ0FBQSxHQUFBO0VBQ2hCLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQSxDQUFDLENBQUQsSUFBTSxLQUFOLElBQU0sS0FBTixJQUFlLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBNUIsQ0FBWDtFQUNBLElBQUcsS0FBQSxLQUFPLENBQUMsQ0FBWDtXQUNDLEtBQUssQ0FBQyxNQUFOLENBQWE7TUFBQyxLQUFBLEVBQU0sRUFBUDtNQUFXLEdBQUEsRUFBSSxFQUFmO01BQW1CLEdBQUEsRUFBSSxFQUF2QjtNQUEyQixTQUFBLEVBQVUsRUFBckM7TUFBeUMsWUFBQSxFQUFhO0lBQXRELENBQWIsRUFERDtHQUFBLE1BQUE7V0FHQyxLQUFLLENBQUMsTUFBTixDQUFhLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBRCxDQUF6QixFQUhEOztBQUZnQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBnbG9iYWwgPSB7XHJcblx0dmVyc2lvbjondmVyOiBCJyxcclxuXHRib2FyZDpudWxsLFxyXG5cdGluZGV4OjAsXHJcblx0U0laRTo1MCwgIyBvZiBzcXVhcmVcclxuXHRwaWNzOnt9LCAjIDEyIHBqw6RzZXJcclxuXHRtb3ZlczpbXSxcclxuXHRkYXRhOm51bGwsXHJcblx0YnV0dG9uczpbXSxcclxuXHRkYXRhYmFzZToge30sXHJcblx0Y3VyclRyZWU6MCwgIyBpbmRleCB0aWxsIHRyw6RkZW5cclxuXHRjdXJyTm9kZTpudWxsLCAjIHBla2FyIGluIGkgZXR0IHRyw6RkXHJcblx0c3RhY2s6W11cclxufVxyXG5cclxuaW1wb3J0IHthc3MsbG9nLHJhbmdlLHNwbGl0LHBhcmFtLGhleFRvQmFzZTY0fSBmcm9tICcuLi9qcy91dGlscy5qcydcclxuaW1wb3J0IHtCdXR0b259IGZyb20gJy4uL2pzL2J1dHRvbi5qcydcclxuaW1wb3J0IF8gICAgICAgICAgIGZyb20gJ2h0dHBzOi8vY2RuLnNreXBhY2suZGV2L2xvZGFzaCdcclxuaW1wb3J0IGNyeXB0b0pzIGZyb20gJ2h0dHBzOi8vY2RuLnNreXBhY2suZGV2L2NyeXB0by1qcydcclxuXHJcbmV4cG9ydCBjb29yZHMgPSAodWNpKSA9PlxyXG5cdHBhcmFtLlN0cmluZyB1Y2lcclxuXHRjMCA9IFwiYWJjZGVmZ2hcIi5pbmRleE9mIHVjaVswXVxyXG5cdHIwID0gXCIxMjM0NTY3OFwiLmluZGV4T2YgdWNpWzFdXHJcblx0YzEgPSBcImFiY2RlZmdoXCIuaW5kZXhPZiB1Y2lbMl1cclxuXHRyMSA9IFwiMTIzNDU2NzhcIi5pbmRleE9mIHVjaVszXVxyXG5cdHBhcmFtLkFycmF5IFtjMCs4KnIwLCBjMSs4KnIxXVxyXG5hc3MgWzgsMjRdLCBjb29yZHMgXCJhMmE0XCJcclxuXHJcbmV4cG9ydCB0b1VDSSA9IChbZnJvbSx0b10pID0+XHJcblx0cGFyYW0uSW50ZWdlciBmcm9tXHJcblx0cGFyYW0uSW50ZWdlciB0b1xyXG5cdGMwID0gXCJhYmNkZWZnaFwiW2Zyb20lOF1cclxuXHRyMCA9IFwiMTIzNDU2NzhcIltmcm9tLy84XVxyXG5cdGMxID0gXCJhYmNkZWZnaFwiW3RvJThdXHJcblx0cjEgPSBcIjEyMzQ1Njc4XCJbdG8vLzhdXHJcblx0cGFyYW0uU3RyaW5nIGMwK3IwK2MxK3IxXHJcbmFzcyBcImUyZTRcIiwgdG9VQ0kgWzEyLDI4XVxyXG5cclxuZXhwb3J0IHRvT2JqZWN0Tm90YXRpb24gPSAoW2Zyb20sdG9dKSA9PlxyXG5cdHBhcmFtLkludGVnZXIgZnJvbVxyXG5cdHBhcmFtLkludGVnZXIgdG9cclxuXHR1Y2kgPSB0b1VDSSBbZnJvbSx0b11cclxuXHRmcm9tID0gdWNpLnNsaWNlIDAsMlxyXG5cdHRvID0gdWNpLnNsaWNlIDIsNFxyXG5cdHBhcmFtLk9iamVjdCB7ZnJvbSwgdG99XHJcbmFzcyB7ZnJvbTonZTInLCB0bzonZTQnfSwgdG9PYmplY3ROb3RhdGlvbiBbMTIsMjhdXHJcblxyXG5leHBvcnQgZW1wdHkgPSAobikgPT5cclxuXHRwYXJhbS5JbnRlZ2VyIG5cclxuXHRwYXJhbS5TdHJpbmcgKDErbi8vOCkudG9TdHJpbmcoKVxyXG5cclxucGd1cCA9ID0+IGxvYWRUcmVlIDFcclxucGdkbiA9ID0+IGxvYWRUcmVlIC0xXHJcbnVuZG8gPSA9PiBcclxuXHRnbG9iYWwuY2hlc3MudW5kbygpXHJcblx0Z2xvYmFsLmN1cnJOb2RlID0gZ2xvYmFsLnN0YWNrLnBvcCgpXHJcblx0IyBkdW1wU3RhdGUoKVxyXG5cclxuZXhwb3J0IGR1bXBTdGF0ZSA9ID0+XHJcblx0Y29uc29sZS5sb2cgJ1NUQVRFICMjIyMjIyMjJ1xyXG5cdGNvbnNvbGUubG9nICcgIHN0YWNrJyxnbG9iYWwuc3RhY2tcclxuXHRjb25zb2xlLmxvZyAnICBjdXJyTm9kZScsZ2xvYmFsLmN1cnJOb2RlXHJcblx0Y29uc29sZS5sb2cgJyAgaGlzdG9yeScsZ2xvYmFsLmNoZXNzLmhpc3RvcnkoKVxyXG5cclxuZXhwb3J0IGxvYWRUcmVlID0gKGRlbHRhKSA9PlxyXG5cdHBhcmFtLlRlc3QgZGVsdGEgaW4gWy0xLDAsMV1cclxuXHRnbG9iYWwuY3VyclRyZWUgPSAoZ2xvYmFsLmN1cnJUcmVlK2RlbHRhKSAlJSBfLnNpemUgZ2xvYmFsLnRyZWVzXHJcblxyXG5cdGtleXMgPSBfLmtleXMgZ2xvYmFsLnRyZWVzXHJcblx0Z2xvYmFsLnRyZWUgPSBnbG9iYWwudHJlZXNba2V5c1tnbG9iYWwuY3VyclRyZWVdXVxyXG5cclxuXHRnbG9iYWwuY3Vyck5vZGUgPSBnbG9iYWwudHJlZS5tb3Zlc1tcIlwiXVxyXG5cdGdsb2JhbC5zdGFjayA9IFtdICMucHVzaCBnbG9iYWwuY3Vyck5vZGVcclxuXHQjZHVtcFN0YXRlKClcclxuXHJcbmcgPSAoaXRlbSkgPT5cclxuXHQjIHBhcmFtLkludGVnZXIgaXRlbSBvciBwYXJhbS5TdHJpbmdcclxuXHRpZiBcIiMtXCIgaW4gaXRlbSB0aGVuIHJldHVybiAtMTAwMFxyXG5cdGlmIFwiI1wiIGluIGl0ZW0gdGhlbiByZXR1cm4gMTAwMFxyXG5cdHBhcmFtLkludGVnZXIgcGFyc2VJbnQgaXRlbVxyXG5cclxuZiA9IChhcnJTY29yZSxjKSA9PlxyXG5cdHBhcmFtLkFycmF5IGFyclNjb3JlXHJcblx0cGFyYW0uU3RyaW5nIGNcclxuXHRhcnJTY29yZSA9IF8ubWFwIGFyclNjb3JlLCAoaXRlbSkgPT4gZyBpdGVtXHJcblx0YSA9IF8ubWluIGFyclNjb3JlXHJcblx0YiA9IF8ubWF4IGFyclNjb3JlXHJcblx0YyA9IGcgY1xyXG5cdGQgPSBfLm1heCBbTWF0aC5hYnMoYSksTWF0aC5hYnMoYildXHJcblx0YSA9IC1kXHJcblx0cGFyYW0uTnVtYmVyIChjLWEpLygyKmQpXHJcbmFzcyAwLCBmIFstMTAwLDUwXSwnLTEwMCdcclxuYXNzIDAuNzUsIGYgWy0xMDAsNTBdLCc1MCdcclxuYXNzIDEsIGYgWy0xMDAsNTBdLCcxMDAnXHJcblxyXG5leHBvcnQgY2xpY2tTdHJpbmcgPSAoa2V5KSA9PlxyXG5cdHBhcmFtLlN0cmluZyBrZXlcclxuXHRpZiBrZXkgPT0gJ2ZsaXAnIHRoZW4gZ2xvYmFsLmJvYXJkLmZsaXAoKVxyXG5cdGVsc2UgaWYga2V5ID09ICdsaW5rJyB0aGVuIHdpbmRvdy5vcGVuIGRhdGEubGluaywgJ19ibGFuaydcclxuXHRlbHNlIGlmIGtleSA9PSAndXAnICAgdGhlbiBmaXhTdXBlciAtMVxyXG5cdGVsc2UgaWYga2V5ID09ICdkb3duJyB0aGVuIGZpeFN1cGVyIDFcclxuXHRlbHNlIGlmIGtleSA9PSAncGd1cCcgdGhlbiBwZ3VwKClcclxuXHRlbHNlIGlmIGtleSA9PSAncGdkbicgdGhlbiBwZ2RuKClcclxuXHRlbHNlIGlmIGtleSA9PSAndW5kbycgdGhlbiB1bmRvKClcclxuXHRlbHNlIGNvbnNvbGUubG9nICd1bmtub3duIGtleSBpbiBjbGlja1N0cmluZycsa2V5XHJcblxyXG5leHBvcnQgZ2V0TW92ZSA9IChpbmRleCkgPT5cclxuXHRwYXJhbS5UZXN0IC0xIDw9IGluZGV4IDw9IGdsb2JhbC5tb3Zlcy5sZW5ndGhcclxuXHRpZiBpbmRleD09LTFcclxuXHRcdHBhcmFtLk9iamVjdCB7c2NvcmU6JycsIHVjaTonJywgc2FuOicnLCBzdXBlcmlvcnM6W10sIHN1cGVyaW9yc1NhbjpbXX1cclxuXHRlbHNlXHJcblx0XHRwYXJhbS5PYmplY3QgZ2xvYmFsLm1vdmVzW2luZGV4XVxyXG4iXX0=
//# sourceURL=c:\github\2023-019-ChessTree\coffee\globals.coffee