// Generated by CoffeeScript 2.5.1
var f, g, pgdn, pgup, undo,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

import {
  ass,
  log,
  range,
  split,
  param,
  hexToBase64
} from '../js/utils.js';

import {
  Button
} from '../js/button.js';

import _ from 'https://cdn.skypack.dev/lodash';

import cryptoJs from 'https://cdn.skypack.dev/crypto-js';

import {
  download
} from '../js/download.js';

export var global = {
  version: 'ver: B',
  board: null,
  index: 0,
  SIZE: 50, // of square
  pics: {}, // 12 pjäser
  moves: [],
  data: null,
  buttons: [],
  database: {},
  currTree: 0, // index till träden
  currNode: null, // pekar in i ett träd
  count: 0, // räknar antal nya drag i trädet
  stack: []
};

export var coords = (uci) => {
  var c0, c1, r0, r1;
  param.String(uci);
  c0 = "abcdefgh".indexOf(uci[0]);
  r0 = "12345678".indexOf(uci[1]);
  c1 = "abcdefgh".indexOf(uci[2]);
  r1 = "12345678".indexOf(uci[3]);
  return param.Array([c0 + 8 * r0, c1 + 8 * r1]);
};

ass([8, 24], coords("a2a4"));

export var toUCI = ([from, to]) => {
  var c0, c1, r0, r1;
  param.Integer(from);
  param.Integer(to);
  c0 = "abcdefgh"[from % 8];
  r0 = "12345678"[Math.floor(from / 8)];
  c1 = "abcdefgh"[to % 8];
  r1 = "12345678"[Math.floor(to / 8)];
  return param.String(c0 + r0 + c1 + r1);
};

ass("e2e4", toUCI([12, 28]));

export var toObjectNotation = ([from, to]) => {
  var uci;
  param.Integer(from);
  param.Integer(to);
  uci = toUCI([from, to]);
  from = uci.slice(0, 2);
  to = uci.slice(2, 4);
  return param.Object({from, to});
};

ass({
  from: 'e2',
  to: 'e4'
}, toObjectNotation([12, 28]));

export var empty = (n) => {
  param.Integer(n);
  return param.String((1 + Math.floor(n / 8)).toString());
};

pgup = () => {
  return loadTree(1);
};

pgdn = () => {
  return loadTree(-1);
};

undo = () => {
  global.chess.undo();
  return global.currNode = global.stack.pop();
};

// dumpState()
export var dumpState = () => {
  console.log('STATE ########');
  console.log('  stack', global.stack);
  console.log('  currNode', global.currNode);
  return console.log('  history', global.chess.history());
};

export var loadTree = (delta) => {
  var keys;
  param.Test(delta === (-1) || delta === 0 || delta === 1);
  global.currTree = modulo(global.currTree + delta, _.size(global.trees));
  keys = _.keys(global.trees);
  global.tree = global.trees[keys[global.currTree]];
  global.currNode = global.tree.moves[""];
  return global.stack = []; //.push global.currNode
};

//dumpState()
g = (item) => {
  // param.Integer item or param.String
  if (indexOf.call(item, "#-") >= 0) {
    return -1000;
  }
  if (indexOf.call(item, "#") >= 0) {
    return 1000;
  }
  return param.Integer(parseInt(item));
};

f = (arrScore, c) => {
  var a, b, d;
  param.Array(arrScore);
  param.String(c);
  arrScore = _.map(arrScore, (item) => {
    return g(item);
  });
  a = _.min(arrScore);
  b = _.max(arrScore);
  c = g(c);
  d = _.max([Math.abs(a), Math.abs(b)]);
  a = -d;
  return param.Number((c - a) / (2 * d));
};

ass(0, f([-100, 50], '-100'));

ass(0.75, f([-100, 50], '50'));

ass(1, f([-100, 50], '100'));

export var clickString = (key) => {
  param.String(key);
  if (key === 'flip') {
    return global.board.flip();
  } else if (key === 'link') {
    return window.open(data.link, '_blank');
  } else if (key === 'up') {
    return fixSuper(-1);
  } else if (key === 'down') {
    return fixSuper(1);
  } else if (key === 'pgup') {
    return pgup();
  } else if (key === 'pgdn') {
    return pgdn();
  } else if (key === 'undo') {
    return undo();
  } else if (key === 'save') {
    return download(global.tree, global.filename + '.json');
  } else {
    return console.log('unknown key in clickString', key);
  }
};

export var getMove = (index) => {
  param.Test((-1 <= index && index <= global.moves.length));
  if (index === -1) {
    return param.Object({
      score: '',
      uci: '',
      san: '',
      superiors: [],
      superiorsSan: []
    });
  } else {
    return param.Object(global.moves[index]);
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-019-ChessTree\coffee\globals.coffee