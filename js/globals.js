// Generated by CoffeeScript 2.5.1
var f, g, pgdn, pgup,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

export var global = {
  version: 'ver: B',
  board: null,
  index: 0,
  SIZE: 50,
  filename: "",
  pics: {},
  moves: [],
  data: null,
  superIndex: 0,
  piecess: [],
  buttons: [],
  database: {},
  currTree: 0
};

import {
  ass,
  log,
  range,
  split,
  param
} from '../js/utils.js';

import {
  Button
} from '../js/button.js';

import _ from 'https://cdn.skypack.dev/lodash';

export var coords = (uci) => {
  var c0, c1, r0, r1;
  param.String(uci);
  c0 = "abcdefgh".indexOf(uci[0]);
  r0 = "12345678".indexOf(uci[1]);
  c1 = "abcdefgh".indexOf(uci[2]);
  r1 = "12345678".indexOf(uci[3]);
  return param.Array([c0 + 8 * r0, c1 + 8 * r1]);
};

ass([8, 24], coords("a2a4"));

export var toUCI = (from, to) => {
  var c0, c1, r0, r1;
  param.Integer(from);
  param.Integer(to);
  c0 = "abcdefgh"[from % 8];
  r0 = "12345678"[Math.floor(from / 8)];
  c1 = "abcdefgh"[to % 8];
  r1 = "12345678"[Math.floor(to / 8)];
  return param.String(c0 + r0 + c1 + r1);
};

ass("e2e4", toUCI(12, 28));

export var toObjectNotation = (from, to) => {
  var uci;
  param.Integer(from);
  param.Integer(to);
  uci = toUCI(from, to);
  from = uci.slice(0, 2);
  to = uci.slice(2, 4);
  return param.Object({from, to});
};

export var empty = (n) => {
  param.Integer(n);
  return param.String((1 + Math.floor(n / 8)).toString());
};

pgup = () => {
  return loadTree(1);
};

pgdn = () => {
  return loadTree(-1);
};

export var loadTree = (delta) => {
  var keys;
  param.Test(delta === (-1) || delta === 0 || delta === 1);
  global.currTree = modulo(global.currTree + delta, _.size(global.trees));
  keys = _.keys(global.trees);
  global.filename = keys[global.currTree];
  global.tree = global.trees[keys[global.currTree]];
  // global.board.start()

  // global.moves = global.tree.plies
  // global.piecess = []
  // global.moves = _.map global.moves, (move) =>
  // 	score = move[1]
  // 	san = move[2]
  // 	superiorsSan = split move[3]
  // 	uci = move[4]
  // 	superiors = split move[5]
  // 	scores = split move[6]
  // 	superiorsSan = superiorsSan.slice 0,12
  // 	superiors = superiors.slice 0,12
  // 	{score, uci, san, superiors, superiorsSan, scores}
  // global.piecess.push global.board.pieces

  // for move in global.moves
  // 	global.board.pieces = makeMove move.uci, _.last global.piecess
  // 	global.piecess.push global.board.pieces
  return clickString('last'); // slutställning
};


// export makeMove = (uci,pieces) =>
// 	param.String uci
// 	param.String pieces

// 	swap = (a,b,c,d) ->
// 		param.Integer a
// 		param.Integer b
// 		param.Integer c
// 		param.Integer d
// 		[pieces[a],pieces[b],pieces[c],pieces[d]] = [pieces[b],pieces[a],pieces[d],pieces[c]]

// 	promote = (uci,from,to) ->
// 		param.String uci
// 		param.Integer from
// 		param.Integer to
// 		newPiece = uci[4]
// 		if to in range 56,63 then newPiece = newPiece.toUpperCase()
// 		pieces[to] = newPiece
// 		pieces[from] = empty from

// 	enPassantTrue = (from,to) -> # Denna funktion skapades av CoPilot. Nästan korrekt.
// 		param.Integer from
// 		param.Integer to
// 		res = false
// 		if pieces[from] in 'pP' and pieces[to] == empty to
// 			if pieces[from] == 'p' and pieces[to+8]=='P' and from - to in [7,9] then res = true # black takes white pawn
// 			if pieces[from] == 'P' and pieces[to-8]=='p' and to - from in [7,9] then res = true # white takes black pawn
// 		param.Boolean res

// 	enPassant = (from,to) ->
// 		param.Integer from
// 		param.Integer to
// 		if pieces[from] == 'p' then pieces[to+8] = empty to+8
// 		if pieces[from] == 'P' then pieces[to-8] = empty to-8
// 		pieces[to] = pieces[from]
// 		pieces[from] = empty to

// 	normalMove = (from,to) ->
// 		param.Integer from
// 		param.Integer to
// 		pieces[to] = pieces[from]
// 		pieces[from] = empty from 
// 		param.Array pieces

// 	pieces = pieces.split ""

// 	[from,to] = coords uci
// 	if uci=='e1g1' then swap 4,6,5,7 # castlings
// 	else if uci=='e1c1' then swap 4,2,0,3
// 	else if uci=='e8g8' then swap 60,62,61,63
// 	else if uci=='e8c8' then swap 56,59,58,60
// 	else if uci.length == 5 then promote uci,from,to
// 	else if enPassantTrue from,to then enPassant from,to
// 	else normalMove from,to
// 	pieces = pieces.join ""
// 	pieces

// ass "RNBQKBNRPPPP2PPP333333334444P4445555555566666666pppppppprnbqkbnr", makeMove 'e2e4', "RNBQKBNRPPPPPPPP33333333444444445555555566666666pppppppprnbqkbnr"
// ass "R1111RK1222222223333333344444444555555556666666677777777r888k88r", makeMove 'e1g1', "R111K11R222222223333333344444444555555556666666677777777r888k88r"
// ass "11KR111R222222223333333344444444555555556666666677777777r888k88r", makeMove 'e1c1', "R111K11R222222223333333344444444555555556666666677777777r888k88r"
// ass "R111K11R222222223333333344444444555555556666666677777777r8888rk8", makeMove 'e8g8', "R111K11R222222223333333344444444555555556666666677777777r888k88r"
// ass "R111K11R22222222333333334444444455555555666666667777777788kr888r", makeMove 'e8c8', "R111K11R222222223333333344444444555555556666666677777777r888k88r"
// ass "R111K11R222222223333333344444444555555556666666677777777Q8888888", makeMove 'a7a8q',"R111K11R2222222233333333444444445555555566666666P777777788888888"
// ass "1111r11122222222333333334444444455555555666666667777777788888888", makeMove 'e2e1r',"111111112222p222333333334444444455555555666666667777777788888888"
// ass "11111111222222223333p3334444444455555555666666667777777788888888", makeMove 'f4e3', "11111111222222223333P33344444p4455555555666666667777777788888888"
// ass 'RNBQKBNR2PPPPPPP33333333P44444445555555566666666pppppppprnbqkbnr', makeMove 'a2a4', "RNBQKBNRPPPPPPPP33333333444444445555555566666666pppppppprnbqkbnr"
g = (item) => {
  // param.Integer item or param.String
  if (indexOf.call(item, "#-") >= 0) {
    return -1000;
  }
  if (indexOf.call(item, "#") >= 0) {
    return 1000;
  }
  return param.Integer(parseInt(item));
};

f = (arrScore, c) => {
  var a, b, d;
  param.Array(arrScore);
  param.String(c);
  arrScore = _.map(arrScore, (item) => {
    return g(item);
  });
  a = _.min(arrScore);
  b = _.max(arrScore);
  c = g(c);
  d = _.max([Math.abs(a), Math.abs(b)]);
  a = -d;
  return param.Number((c - a) / (2 * d));
};

ass(0, f([-100, 50], '-100'));

ass(0.75, f([-100, 50], '50'));

ass(1, f([-100, 50], '100'));

export var setIndex = (value) => {
  var arrSAN, arrScore, i, j, len, move, ref;
  param.Integer(value);
  if (value < -1 || value > global.moves.length) {
    return;
  }
  if (value === -1) {
    return global.board.start();
  } else {
    global.index = value;
    global.buttons = [];
    global.board.pieces = global.piecess[global.index];
    if (global.index <= 0) {
      return;
    }
    move = global.moves[global.index - 1];
    global.superIndex = 0;
    if (move.superiors.length === 0) {
      arrSAN = [move.san];
      arrScore = [move.score];
    } else {
      arrSAN = move.superiorsSan.concat([move.san]);
      arrScore = move.scores.concat([move.score]);
    }
    ref = range(min(13, arrSAN.length));
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      ((i) => {
        var button, x, y;
        x = 9.4 * global.SIZE;
        y = 0.8 * global.SIZE * (i + 1.1);
        button = new Button(x, y, arrSAN[i], () => {
          return clickInteger(i);
        });
        button.bg = ['black', 'white'][global.index % 2];
        button.fg = ['white', 'black'][global.index % 2];
        button.align = LEFT;
        button.bar = f(arrScore, arrScore[i]);
        return global.buttons.push(button);
      })(i);
    }
    return global.buttons[0].drawStar = true;
  }
};

export var clickString = (key) => {
  param.String(key);
  if (key === 'flip') {
    return global.board.flip();
  } else if (key === 'first') {
    return setIndex(0);
  } else if (key === 'last') {
    return setIndex(global.moves.length);
  } else if (key === 'prev') {
    return setIndex(global.index - 1);
  } else if (key === 'next') {
    return setIndex(global.index + 1);
  } else if (key === 'link') {
    return window.open(data.link, '_blank');
  } else if (key === 'up') {
    return fixSuper(-1);
  } else if (key === 'down') {
    return fixSuper(1);
  } else if (key === 'pgup') {
    return pgup();
  } else if (key === 'pgdn') {
    return pgdn();
  } else {
    return console.log('unknown key in clickString', key);
  }
};

export var clickInteger = (ix) => {
  param.Integer(ix);
  //setIndex global.index
  //global.superIndex = key
  return global.board.move(ix); //global.superIndex
};

//fixSuper 0
export var fixSuper = (value) => {
  var uci;
  param.Test(value === (-1) || value === 0 || value === 1);
  global.superIndex = modulo(global.superIndex + value, getMove(global.index - 1).superiors.length + 1);
  if (global.superIndex === 0) {
    uci = getMove(global.index - 1).uci;
  } else {
    uci = getMove(global.index - 1).superiors[global.superIndex - 1];
  }
  return global.board.pieces = makeMove(uci, global.piecess[global.index - 1]);
};

export var getMove = (index) => {
  param.Test((-1 <= index && index <= global.moves.length));
  if (index === -1) {
    return param.Object({
      score: '',
      uci: '',
      san: '',
      superiors: [],
      superiorsSan: []
    });
  } else {
    return param.Object(global.moves[index]);
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-019-ChessTree\coffee\globals.coffee